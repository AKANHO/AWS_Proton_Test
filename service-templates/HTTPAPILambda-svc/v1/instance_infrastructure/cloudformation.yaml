AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Simple Lambda based HTTP service template

Globals:
  Function:
    CodeUri: {{service_instance.inputs.code_uri}}
    Runtime: {{service_instance.inputs.lambda_runtime}}
    MemorySize: {{service_instance.inputs.lambda_memory}}
    Timeout: {{service_instance.inputs.lambda_timeout}}
    Tracing: Active


Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: '{{service_instance.name}}'
      Description: An Amazon API Gateway HTTP API and an AWS Lambda function.
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - HEAD
          - OPTIONS
          - POST
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction}/invocations
  # Lambda Function - uses Globals to define additional configuration values
  # Define the publisher Lambda function with permissions\
{% if service_instance.inputs.code_uri is defined %}
  LambdaFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: '{{service_instance.name}}-function'
      Handler: '{{service_instance.inputs.lambda_handler}}'
      Environment:
        Variables:
          SNStopic: '{{environment.outputs.SNSTopic}}'
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - SNSPublishMessagePolicy:
            TopicName: '{{environment.outputs.SNSTopicName}}'
      VpcConfig:
        SecurityGroupIds:
          - '{{environment.outputs.VPCSecurityGroup}}'
        SubnetIds:
        {% if service_instance.inputs.subnet_type == 'private' %}
            - '{{environment.outputs.PrivateSubnet1}}'
            - '{{environment.outputs.PrivateSubnet2}}'
        {% else %}
            - '{{environment.outputs.PublicSubnet1}}'
            - '{{environment.outputs.PublicSubnet2}}'
        {% endif %}
  # Function permissions grant an AWS service or another account permission to use a function
  FunctionResourcePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref LambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*'
{% endif %}
Outputs:
  HttpApiEndpoint:
    Description: The default endpoint for the HTTP API.
    Value: !GetAtt HttpApi.ApiEndpoint
